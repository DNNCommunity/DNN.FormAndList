<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlHelpText.Help" xml:space="preserve">
    <value>This is the Help Text displayed to the user to explain this field.</value>
  </data>
  <data name="ControlHelpText.Text" xml:space="preserve">
    <value>Help Text</value>
  </data>
  <data name="Required.Help" xml:space="preserve">
    <value>This setting enforces an input for this field.</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="RestrictedFormField.Help" xml:space="preserve">
    <value>The field is only shown in the form if the user fullfils the corresponding permission.</value>
  </data>
  <data name="RestrictedFormField.Text" xml:space="preserve">
    <value>Restricted Form Field</value>
  </data>
  <data name="Searchable.Help" xml:space="preserve">
    <value>Indicates whether this field should be included in the module Search. This setting has no influence whether the field gets indexed for the side wide search.</value>
  </data>
  <data name="Searchable.Text" xml:space="preserve">
    <value>Searchable</value>
  </data>
  <data name="Type.Help" xml:space="preserve">
    <value>The type of the field controls controls the form elements and the content displayed in the list.</value>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Title.Help" xml:space="preserve">
    <value>Title of the field</value>
  </data>
  <data name="TitleIsRequired.Text" xml:space="preserve">
    <value>Title is required!</value>
  </data>
  <data name="ControlTitle_editfield.Text" xml:space="preserve">
    <value>Field Editor</value>
  </data>
  <data name="DisplayOnList.Help" xml:space="preserve">
    <value>This setting decides whether this field gets hidden by default in a normal grid view. By default it gets still shown to Administrators (which can be overridden in Module Settings). &lt;br&gt;This setting acts just as a marker within XSLT scripts - it is up to the script editor to control the desired behavior. </value>
  </data>
  <data name="DisplayOnList.Text" xml:space="preserve">
    <value>Display on List</value>
  </data>
  <data name="CancelButtonText.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CaptionHeaderText.Text" xml:space="preserve">
    <value>Caption</value>
  </data>
  <data name="EditCaptionTitle.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditLinkText.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="RemoveButtonText.Text" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="AddButtonText.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="SaveButtonText.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ValueHeaderText.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="cmdSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="UniqueFieldName.ErrorMessage" xml:space="preserve">
    <value>Field title has to be unique</value>
  </data>
  <data name="UnsupportedCast.ErrorMessage" xml:space="preserve">
    <value>You have changed the Field type for &lt;b&gt;{2}&lt;/b&gt; from "{0}" to "{1}". Note that this might cause an error, this is an unsupported cast!</value>
  </data>
  <data name="SpecialCharactersInFieldTitle.ErrorMessage" xml:space="preserve">
    <value>Column title MUST NOT contain any of these characters: *:,? </value>
  </data>
  <data name="ValidationMessage.Help" xml:space="preserve">
    <value>This message will be displayed if the user entered value violates the Validation Rule.</value>
  </data>
  <data name="ValidationMessage.Text" xml:space="preserve">
    <value>Validation Message</value>
  </data>
  <data name="ValidationRule.Help" xml:space="preserve">
    <value>This Regular Expression is used to validate the value entered by the user. Failure to match this Regular Expression will prevent the record from being updated.</value>
  </data>
  <data name="ValidationRule.Text" xml:space="preserve">
    <value>Validation Rule</value>
  </data>
  <data name="EditCssStyle.Help" xml:space="preserve">
    <value>Style which is applied on text box or list control in form, for example to change width set "width:300px;min-width:300px;"</value>
  </data>
  <data name="EditCssStyle.Text" xml:space="preserve">
    <value>CSS Style</value>
  </data>
  <data name="lblInputSettings.Help" xml:space="preserve">
    <value>(Placeholder, please translate in sharedResources.resx per datatype!)</value>
  </data>
  <data name="InputSettings.Text" xml:space="preserve">
    <value>(Placeholder, please translate in sharedResources.resx per datatype!)</value>
  </data>
  <data name="NormalizeFlag.Help" xml:space="preserve">
    <value>(Placeholder, please translate in sharedResources.resx per datatype!)</value>
  </data>
  <data name="NormalizeFlag.Text" xml:space="preserve">
    <value>(Placeholder, please translate in sharedResources.resx per datatype!)</value>
  </data>
  <data name="OutputSettings.Help" xml:space="preserve">
    <value>(Placeholder, please translate in sharedResources.resx per datatype!)</value>
  </data>
  <data name="OutputSettings.Text" xml:space="preserve">
    <value>(Placeholder, please translate in sharedResources.resx per datatype!)</value>
  </data>
  <data name="DropDown.Text" xml:space="preserve">
    <value>Dropdown-List</value>
  </data>
  <data name="RadioButtons.Text" xml:space="preserve">
    <value>Radio buttons (vert.)</value>
  </data>
  <data name="RadioButtonsHorizontal.Text" xml:space="preserve">
    <value>Radio buttons (hor.)</value>
  </data>
  <data name="cmdColumnsHelp.Text" xml:space="preserve">
    <value>Hidden Columns Help</value>
  </data>
  <data name="cmdTokensHelp.Text" xml:space="preserve">
    <value>Available Tokens Help</value>
  </data>
  <data name="FormSettings.Text" xml:space="preserve">
    <value>Form Settings</value>
  </data>
  <data name="ListSettings.Text" xml:space="preserve">
    <value>List Settings</value>
  </data>
  <data name="TitleCannotHavePipe.Text" xml:space="preserve">
    <value>The pipe character is not allowed in the field title.</value>
  </data>
</root>